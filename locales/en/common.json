{
  "meheader": "Hi, Im Paul",
  "meheader2": "a Fullstack Developer!",
  "me2": "I started programming at 15, learning Java through Minecraft modding. During an internship at the German Federal Centre for Information Technology, I began Android development and published four apps. While completing a 3-year study at ORBIT IT-Solutions, I discovered web development and worked on projects for clients like T-Systems.",
  "me3": "I am currently working as a web developer in the supply chain optimization sector at REWE Digital, part of the REWE Group.",
  "downloadcv": "Download CV",
  "history": "History",
  "skills": "Skills",
  "projects": "My Projects",
  "projects-free-time": "projects i developed in my freetime",
  "contact": "Contact",
  "read-more": "Read More",
  "role": "My Role",
  "project-description": "Project Description",
  "published": "Published in ",
  "defunct": "Defunct in ",
  "techstack": "Techstack",
  "skyhook-description": "Skyhook is a simple, custom-built server that issues JWTs (JSON Web Tokens) after successful authentication, similar to Keycloak but without strict adherence to standards like OIDC or OAuth. Built in TypeScript with the Express.js framework, it supports a multi-realm, multi-tenant architecture, making it ideal for tenant-based authentication. Features include single sign-on (SSO), single logout (SLO), and external provider authentication (Google, Twitter, Facebook), as well as basic username/password login. Skyhook is well-suited for microservice architectures where multiple services need secure authentication. It also includes a custom Next.js frontend with built-in login, registration, and password reset pages.",
  "skyhook-description-short": "Simple multi realm/ multi tenant JWT based auth server.",
  "skyhook-role": "Developer",
  "multisig-wallet-description-short": "MultiSigWallet for ERC20, ERC721 and Ether transactions",
  "multisig-wallet-description": "This project is a multi-signature wallet built on Ethereum, enabling multiple owners to approve transactions before execution, providing enhanced security. Developed using Solidity and Hardhat, it supports features such as adding/removing owners, setting a required number of approvals for transactions, and viewing pending transactions. The backend smart contracts are thoroughly tested and deployed using Hardhat, ensuring reliable and efficient contract execution. The project also includes a Next.js frontend that allows users to interact with the wallet, including submitting and approving transactions, directly from the browser. The interface is designed for simplicity and usability, making it easy for users to manage their multi-signature wallets securely.",
  "multisig-wallet-role": "Developer",
  "token-maker-description-short": "Simple ERC20/ ERC721 token generator",
  "token-maker-description": "A simple token creation app designed to easily generate fungible (ERC20) and non-fungible (ERC721) tokens on any EVM-compatible blockchain. It supports creating custom token contracts with minimal effort, ensuring that all ERC721 tokens, including metadata and images, are stored fully on-chain using Base64-encoded tokenURIs for full decentralization. The app features a user-friendly Angular frontend, providing a seamless interface for generating and deploying token contracts directly from the browser. With this tool, users can quickly issue ERC20 or ERC721 tokens without needing to write smart contracts from scratch, making it accessible for both developers and non-technical users.",
  "token-maker-role": "Developer",
  "sticker-description": "A simple WhatsApp sticker app that gained unexpected popularity, going viral with over 500k downloads. The app was entirely client-side, so no backend was required. Despite its straightforward functionality, the app became widely popular across the Play Store, providing users with a fun and easy way to enhance their WhatsApp experience.",
  "sticker-description-short": "Simple sticker app for Whatsapp, designed for Fortnite",
  "sticker-role": "Developer",
  "fortnite-description-short": "Minigame for Android and IOS, designed for Fortnite",
  "fortnite-description": "A hybrid mobile app developed with IONIC, where users can earn points (V-Bucks), rank up, and compete against each other. The app featured a simple design but gained unexpected popularity, going viral in both the Play Store and App Store with over 100k downloads and around 500 daily active users. To handle live updates in both the app and the web, I used a combination of Firebase and MongoDB for efficient database management. The backend was fully written in Express.js, ensuring a robust and scalable server architecture. Unfortunately, due to copyright issues, the app was banned from both the Play Store and App Store a few months after its release.",
  "fortnite-role": "Project Leader, Developer"
}
